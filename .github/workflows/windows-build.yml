name: Windows x64 Bitcoin Build

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - master

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup MSYS2 with MINGW64
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-toolchain
            base-devel
            mingw-w64-x86_64-boost
            mingw-w64-x86_64-qt5
            mingw-w64-x86_64-libevent
            mingw-w64-x86_64-openssl
            autoconf
            automake-wrapper
            libtool
            pkg-config
            make
            git
            wget
            tar
            unzip
            mingw-w64-x86_64-protobuf-c
            mingw-w64-x86_64-qrencode

      - name: Build Berkeley DB 4.8
        shell: msys2 {0}
        run: |
          set -e
          cd /tmp
          BDB_VER=4.8.30.NC
          if [ ! -f /mingw64/lib/libdb_cxx-4.8.a ]; then
            echo "Building Berkeley DB ${BDB_VER}"
            wget -q "http://download.oracle.com/berkeley-db/db-${BDB_VER}.tar.gz"
            tar -xzf db-${BDB_VER}.tar.gz
            cd db-${BDB_VER}/build_unix
            ../dist/configure \
              --enable-cxx \
              --disable-shared \
              --disable-replication \
              --with-pic \
              --prefix=/mingw64 \
              --host=x86_64-w64-mingw32
            make -j$(nproc) && make install
          else
            echo "Berkeley DB already installed"
          fi

      - name: Configure build environment
        shell: msys2 {0}
        run: |
          export BDB_PREFIX='/mingw64'
          export BOOST_ROOT='/mingw64'
          export OPENSSL_ROOT='/mingw64'
          export CPPFLAGS="-I${BDB_PREFIX}/include"
          export LDFLAGS="-L${BDB_PREFIX}/lib"
          export BDB_LIBS="-L${BDB_PREFIX}/lib -ldb_cxx-4.8"
          export BDB_CFLAGS="-I${BDB_PREFIX}/include"

      - name: Run autogen.sh
        shell: msys2 {0}
        run: |
          cd $GITHUB_WORKSPACE
          ./autogen.sh

      - name: Configure Bitcoin Core
        shell: msys2 {0}
        run: |
          cd $GITHUB_WORKSPACE
          ./configure \
            --prefix=/mingw64 \
            --host=x86_64-w64-mingw32 \
            --with-qt-incdir=/mingw64/include/qt5 \
            --with-qt-libdir=/mingw64/lib \
            --with-qt-plugindir=/mingw64/share/qt5/plugins \
            --with-qt-bindir=/mingw64/bin \
            --with-boost=/mingw64 \
            --with-boost-libdir=/mingw64/lib \
            --with-dbus \
            --disable-tests \
            --disable-bench \
            --disable-man \
            --disable-zmq \
            --enable-reduce-exports \
            --enable-static \
            --disable-shared

      - name: Build Bitcoin Core
        shell: msys2 {0}
        run: |
          cd $GITHUB_WORKSPACE
          make -j$(nproc) || make

      - name: Verify executable files
        shell: msys2 {0}
        run: |
          echo "Checking for built executables..."
          find . -name "*.exe" -type f | grep -v ".dll" || echo "No .exe files found"
          ls -la src/bitcoind.exe 2>/dev/null || echo "bitcoind.exe not found"
          ls -la src/qt/bitcoin-qt.exe 2>/dev/null || echo "bitcoin-qt.exe not found"
          ls -la src/*.exe 2>/dev/null || echo "No executables in src/"

      - name: Collect artifacts
        shell: msys2 {0}
        run: |
          mkdir -p $GITHUB_WORKSPACE/artifacts
          find . -name "*.exe" -type f -exec cp {} $GITHUB_WORKSPACE/artifacts/ \;
          echo "Artifacts collected:"
          ls -la $GITHUB_WORKSPACE/artifacts/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bitcoin-windows-x64
          path: artifacts/*
